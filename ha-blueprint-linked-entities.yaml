blueprint:
  name: Target Entities
  description: >-
    [![Open your Home Assistant instance and show the blueprint import dialog with a specific blueprint pre-filled.](https://my.home-assistant.io/badges/blueprint_import.svg)](https://my.home-assistant.io/redirect/blueprint_import/?blueprint_url=https%3A%2F%2Fraw.githubusercontent.com%2Firzayev%2Firzayev-ha-blueprints%2Frefs%2Fheads%2Fmain%2Fha-blueprint-linked-entities.yaml)

    **Target Entities v1.5** ðŸ”›

    This blueprint allows you to easily create/maintain an automation that links the state of multiple entities:
      - turn THE source entity ON, it will turn ON ALL linked entities.
      - turn THE source entity OFF, it will turn OFF ALL linked entities.
      - set the brightness of THE source light entity, it will set the same brightness of ALL linked light entities.
      - set the color temp of THE source light entity, it will set the same color temperature of ALL linked light entities.
      - set the color (hs_color) of THE source light entity, it will set the same color of ALL linked light entities.
      - set the speed (percentage) of THE source fan entity, it will set the speed of ALL linked fan entities.

  domain: automation
  input:
    source_entity:
      name: Source Entity
      description: Entity whose state and attributes will be replicated.
      selector:
        entity:
          multiple: false
    group_entity:
      name: Group Entity
      description: Group entity whose state and attributes will be linked.
      selector:
        entity:
          multiple: false
    delay_miliseconds:
      name: Delay
      description: How long to delay changes to linked entities
      selector:
        number:
          min: 0
          max: 1000
          unit_of_measurement: miliseconds
          mode: box
      default: 0

mode: single
max_exceeded: silent

variables:
  source_entities: !input source_entity
  linked_entities: !input group_entity
  group_entities: !input group_entity
  scene_id: "{{ 'scene_' ~ ( this.entity_id | regex_replace(find='\\.', replace='_', ignorecase=False)) }}"
  scene_entity_id: "{{ 'scene.' ~ scene_id}}"

trigger:
  - platform: state
    id: turn_on_source
    entity_id: !input source_entity
    from: "off"
    to: "on"
  - platform: state
    id: turn_off_source
    entity_id: !input source_entity
    from: "on"
    to: "off"
  - platform: state
    id: turn_on_group
    entity_id: !input group_entity
    from: "off"
    to: "on"
  - platform: state
    id: turn_off_group
    entity_id: !input group_entity
    from: "on"
    to: "off"
  - platform: state
    id: set_speed
    entity_id: !input source_entity
    attribute: percentage
  - platform: state
    id: set_brightness
    entity_id: !input source_entity
    attribute: brightness
  - platform: state
    id: set_color_temp
    entity_id: !input source_entity
    attribute: color_temp
  - platform: state
    id: set_color
    entity_id: !input source_entity
    attribute: hs_color

condition:
  - condition: template
    value_template: "{{ trigger.to_state.context.id != this.context.id }}"

action:
  - choose:
      - conditions:
        - condition: trigger
          id: turn_on_group
        sequence:
          - service: homeassistant.turn_on
            target:
              entity_id: "{{ source_entities }}" 
          - delay:
              milliseconds: !input delay_miliseconds

      - conditions:
          - condition: trigger
            id: turn_off_group
        sequence:
          - service: homeassistant.turn_off
            target:
              entity_id: "{{ source_entities }}" 
          - delay:
              milliseconds: !input delay_miliseconds

      - conditions:
          - condition: trigger
            id: turn_on_source
        sequence:
          - if:
            - condition: template
              value_template: "{{ states( scene_entity_id ) == 'unknown' }}"
            then:
              - service: homeassistant.turn_on
                target:
                  entity_id: "{{ state_attr( group_entities,'entity_id') | reject('eq', trigger.entity_id) | select('is_state', 'off') | list }}"
              - service: scene.create
                data:
                  scene_id: "{{ scene_id }}"
                  snapshot_entities: "{{ state_attr( group_entities,'entity_id') }}"                    
          - service: scene.turn_on
            data: {}
            target:
              entity_id: "{{ scene_entity_id }}"
          - delay:
              milliseconds: !input delay_miliseconds

      - conditions:
          - condition: trigger
            id: turn_off_source
        sequence:
        - if:
          - condition: template
            value_template: "{{ states( scene_entity_id ) != 'unknown' }}"
          then:
            - service: scene.delete
              data: {}
              target:
                entity_id: "{{ scene_entity_id }}"
        - service: scene.create
          data:
            scene_id: "{{ scene_id }}"
            snapshot_entities: "{{ state_attr( group_entities,'entity_id') }}"
        - service: homeassistant.turn_off
          target:
            entity_id: "{{ state_attr( group_entities,'entity_id') | reject('eq', trigger.entity_id) | select('is_state', 'on') | list }}"
        - delay:
            milliseconds: !input delay_miliseconds

      - conditions:
          - condition: trigger
            id: set_speed
        sequence:
          - variables:
              set_fan_speed: "{{ trigger.to_state.attributes.percentage }}"
          - service: fan.set_percentage
            data:
              entity_id: "{{ linked_entities | reject('eq', trigger.entity_id) | list }}"
              percentage: "{{ set_fan_speed }}"
          - delay:
              milliseconds: !input delay_miliseconds

      - conditions:
          - condition: trigger
            id: set_brightness
        sequence:
          - variables:
              set_light_brightness: "{{ trigger.to_state.attributes.brightness }}"
          - service: light.turn_on
            data:
              entity_id: "{{ linked_entities | reject('eq', trigger.entity_id) | list }}"
              brightness: "{{ set_light_brightness }}"
          - delay:
              milliseconds: !input delay_miliseconds

      - conditions:
          - condition: trigger
            id: set_color_temp
        sequence:
          - variables:
              set_light_color_temp: "{{ trigger.to_state.attributes.color_temp }}"
          - service: light.turn_on
            data:
              entity_id: "{{ linked_entities | reject('eq', trigger.entity_id) | list }}"
              color_temp: "{{ set_light_color_temp }}"
          - delay:
              milliseconds: !input delay_miliseconds

      - conditions:
          - condition: trigger
            id: set_color
        sequence:
          - variables:
              set_light_color: "{{ trigger.to_state.attributes.hs_color }}"
          - service: light.turn_on
            data:
              entity_id: "{{ linked_entities | reject('eq', trigger.entity_id) | list }}"
              hs_color: "{{ set_light_color }}"
          - delay:
              milliseconds: !input delay_miliseconds
